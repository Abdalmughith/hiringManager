global count = 0;
global countPosition = 0;

define Person {
	constructor: function (obj) {
		this.id = scope.count;
		if(obj.id)
			this.id = obj.id;
		this.title = obj.name;
		this.age = obj.age;

		scope.count++;
	}
}

define skill {
	constructor: function (personId, skillName, score) {
		this.personId = personId;
		this.skillName = skillName;
		this.score = score;
	}
}

define personPos {
	constructor: function (personId, posId, rank) {
		this.personId = personId;
		this.posId = posId;
		this.rank = rank;
	}
}

define position {
	constructor: function (title,skills,education,experience) {
		this.id = scope.countPosition;
		this.title = title;
		this.education = education;	
		this.experience = experience;	
		this.skills = skills;

		scope.countPosition++;
	}
}


define getpositionPersons {
	constructor: function (title) {
		this.title = title;
	}
}

define Result {
	constructor: function (title) {
		this.fired = {};
	}
}

rule "getpositionPersons" {
	when {
		p:getpositionPersons ; 
		pos: position pos.title == p.title;
		perPos : personPos perPos.posId == pos.id;
		person : Person  person.id == perPos.personId;
		r: Result;

	}
	then {
		if (r.fired[pos.title] === undefined)
			r.fired[pos.title]=[];
		r.fired[pos.title].push({person : person, rank: perPos.rank});
	}
}

rule "getAllpositionPersons" {
	when {
		p:getpositionPersons  p.title == "all"; 
		pos: position;
		perPos : personPos perPos.posId == pos.id;
		person : Person  person.id == perPos.personId;
		r: Result;
	}
	then {
	r.fired.x = 3;
		if (r.fired[pos.title] === undefined)
			r.fired[pos.title]=[];
		r.fired[pos.title].push({person : person, rank: perPos.rank});
	}
}

rule "WEb"{
	when {
		pos: position pos.title == "WEb";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score))/6;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "experinceRank" {
	when {
		perPos: personPos ; 
		pos: position pos.id== perPos.posId;
		person : Person  person.id == perPos.personId;
        s : skill s.personId == person.id &&  s.skillName =="experience";
	}
	then {
		console.log("hi");
		var perRank = perPos.rank;
		if(s.score > pos.experience)
			perPos.rank = perRank + 3;
		perPos.rank = (s.score * 3)/pos.experience;
		modify(perPos);
		
	}
}

rule "Test"{
	when {
		pos: position pos.title == "Test";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score))/null;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "tt"{
	when {
		pos: position pos.title == "tt";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score))/0;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "NaNa"{
	when {
		pos: position pos.title == "NaNa";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score))/8;
		assert(new personPos(c.id,pos.id,rank));
	}
}
