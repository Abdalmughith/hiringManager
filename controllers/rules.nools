global count = 0;
global countPosition = 0;

define Person {
	constructor: function (obj) {
		this.id = scope.count;
		if(obj.id)
			this.id = obj.id;
		this.title = obj.name;
		this.age = obj.age;

		scope.count++;
	}
}


define Time {
        constructor: function (obj) {
                this.start = obj.start;
                this.end = obj.end;

        }
}
define skill {
	constructor: function (personId, skillName, score) {
		this.personId = personId;
		this.skillName = skillName;
		this.score = score;
	}
}

define personPos {
	constructor: function (personId, posId, rank) {
		this.personId = personId;
		this.posId = posId;
		this.rank = rank;
		this.isEducationRank = false;
		this.isExperienceRank = false;
	}
}

define position {
	constructor: function (title,skills,education,experience) {
		this.id = scope.countPosition;
		this.title = title;
		this.education = education;	
		this.experience = experience;	
		this.skills = skills;

		scope.countPosition++;
	}
}


define getpositionPersons {
	constructor: function (title) {
		this.title = title;
	}
}

define Result {
	constructor: function (title) {
		this.fired = {};
	}
}

rule "educationRank" {
	when {
		personPosition: personPos personPosition.isEducationRank == false; 
		pos: position pos.id== personPosition.posId;
		person: Person  person.id == personPosition.personId;
        sk: skill sk.personId == person.id && sk.skillName =="education" ;	
	// ((pos.education == 'student')||(sk.score != 'student' && pos.education == 'bachelor') || (sk.score != 'student'  && sk.score != 'bachelor' && 
	// pos.education == 'master')|| (sk.score != 'student'  && sk.score != 'bachelor' && sk.score != 'master' && pos.education == 'phd'));
	}
	then {
		var educationR =0;
		console.log();
		if(_.replace(pos.education,' ','') == 'student'){
			if(_.replace(sk.score,' ','') == 'student') educationR = 0.5;
			if(_.replace(sk.score,' ','') == 'bachelor') educationR = 1;
			if(_.replace(sk.score,' ','') == 'master') educationR = 1.5;
		}
		if(_.replace(pos.education,' ','') == 'bachelor'){
			if(_.replace(sk.score,' ','') == 'bachelor') educationR = 1;
			if(_.replace(sk.score,' ','') == 'master') educationR = 1.5;
		}
		if(_.replace(pos.education,' ','') == 'master'){
			if(_.replace(sk.score,' ','') == 'master') educationR = 1;
		}
		
		if(_.replace(sk.score,' ','') == 'phd') educationR = 2;

		//if(sk.score == 'student')educationR = 0.5;
		//if(_.replace(sk.score, ' ', '') == 'bachelor')educationR = 1;
		//if(sk.score == 'master')educationR = 1.5;
		//if(sk.score == 'phd')educationR = 2;

		modify(personPosition, function(){
			this.rank += educationR;
			this.isEducationRank = true;
		});
	}
}

rule "experienceRank" {
	when {
		personPosition: personPos personPosition.isExperienceRank == false; 
		pos: position pos.id== personPosition.posId;
		person: Person  person.id == personPosition.personId;
        sk: skill sk.personId == person.id && sk.skillName =="experience" ;	
	}
	then {
		console.log("hi");
		var perRank = personPosition.rank;

		if(sk.score >= pos.experience)
			var ERank =  3;
		else	
		var ERank = (sk.score * 3)/pos.experience;

		personPosition.isExperienceRank = true;
		modify(personPosition);

		modify(personPosition, function(){
			this.rank += ERank;
			this.isExperienceRank = true;
		});
	}
}



rule "getpositionPersons" {
	when {
		p:getpositionPersons ; 
		pos: position pos.title == p.title;
		perPos : personPos perPos.posId == pos.id && perPos.isExperienceRank == true && perPos.isEducationRank == true;
		person : Person  person.id == perPos.personId;
		educationSkill : skill educationSkill.personId == person.id && educationSkill.skillName == 'education';
		experienceSkill : skill experienceSkill.personId == person.id && experienceSkill.skillName == 'experience';
		r: Result;

	}
	then {
		if (r.fired[pos.title] === undefined)
			r.fired[pos.title]=[];
		r.fired[pos.title].push({person : person,education:educationSkill.score ,experience:experienceSkill.score, rank: perPos.rank});
	}
}

rule "getAllpositionPersons" {
	when {
		p:getpositionPersons  p.title == "all"; 
		pos: position;
		perPos : personPos perPos.posId == pos.id;
		person : Person  person.id == perPos.personId;
		r: Result;
	}
	then {
	r.fired.x = 3;
		if (r.fired[pos.title] === undefined)
			r.fired[pos.title]=[];
		r.fired[pos.title].push({person : person, rank: perPos.rank});
	}
}

rule "AI"{
	when {
		pos: position pos.title == "AI";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score))/4;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "frontEnd"{
	when {
		pos: position pos.title == "frontEnd";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
		s2: skill s2.personId == c.id && s2.skillName == pos.skills[2].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score)+ (s2.score *pos.skills[2].score))/34;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "Frontend developer"{
	when {
		pos: position pos.title == "Frontend developer";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
		s2: skill s2.personId == c.id && s2.skillName == pos.skills[2].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score)+ (s2.score *pos.skills[2].score))/40;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "Fullstack Developer"{
	when {
		pos: position pos.title == "Fullstack Developer";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
		s2: skill s2.personId == c.id && s2.skillName == pos.skills[2].name;
		s3: skill s3.personId == c.id && s3.skillName == pos.skills[3].name;
		s4: skill s4.personId == c.id && s4.skillName == pos.skills[4].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score)+ (s2.score *pos.skills[2].score)+ (s3.score *pos.skills[3].score)+ (s4.score *pos.skills[4].score))/70;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "MEAN Stack Developer"{
	when {
		pos: position pos.title == "MEAN Stack Developer";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
		s2: skill s2.personId == c.id && s2.skillName == pos.skills[2].name;
		s3: skill s3.personId == c.id && s3.skillName == pos.skills[3].name;
		s4: skill s4.personId == c.id && s4.skillName == pos.skills[4].name;
		s5: skill s5.personId == c.id && s5.skillName == pos.skills[5].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score)+ (s2.score *pos.skills[2].score)+ (s3.score *pos.skills[3].score)+ (s4.score *pos.skills[4].score)+ (s5.score *pos.skills[5].score))/74;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "Android Developer"{
	when {
		pos: position pos.title == "Android Developer";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
		s2: skill s2.personId == c.id && s2.skillName == pos.skills[2].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score)+ (s2.score *pos.skills[2].score))/48;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "Project Manager"{
	when {
		pos: position pos.title == "Project Manager";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
		s2: skill s2.personId == c.id && s2.skillName == pos.skills[2].name;
		s3: skill s3.personId == c.id && s3.skillName == pos.skills[3].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score)+ (s2.score *pos.skills[2].score)+ (s3.score *pos.skills[3].score))/32;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "Database Administrator"{
	when {
		pos: position pos.title == "Database Administrator";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score))/32;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "Data Scientist "{
	when {
		pos: position pos.title == "Data Scientist ";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
		s2: skill s2.personId == c.id && s2.skillName == pos.skills[2].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score)+ (s2.score *pos.skills[2].score))/44;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "Game Developer"{
	when {
		pos: position pos.title == "Game Developer";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
		s2: skill s2.personId == c.id && s2.skillName == pos.skills[2].name;
		s3: skill s3.personId == c.id && s3.skillName == pos.skills[3].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score)+ (s2.score *pos.skills[2].score)+ (s3.score *pos.skills[3].score))/56;
		assert(new personPos(c.id,pos.id,rank));
	}
}
