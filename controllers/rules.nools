global count = 0;
global countPosition = 0;

define Person {
	constructor: function (obj) {
		this.id = scope.count;
		if(obj.id)
			this.id = obj.id;
		this.title = obj.name;
		this.age = obj.age;

		scope.count++;
	}
}

define skill {
	constructor: function (personId, skillName, score) {
		this.personId = personId;
		this.skillName = skillName;
		this.score = score;
	}
}

define personPos {
	constructor: function (personId, posId, rank) {
		this.personId = personId;
		this.posId = posId;
		this.rank = rank;
		this.isEducationRank = false;
	}
}

define position {
	constructor: function (title,skills,education,experience) {
		this.id = scope.countPosition;
		this.title = title;
		this.education = education;	
		this.experience = experience;	
		this.skills = skills;

		scope.countPosition++;
	}
}


define getpositionPersons {
	constructor: function (title) {
		this.title = title;
	}
}

define Result {
	constructor: function (title) {
		this.fired = {};
	}
}

rule "educationRank" {
	when {
		personPosition: personPos personPosition.isEducationRank == false; 
		pos: position pos.id== personPosition.posId;
		person: Person  person.id == personPosition.personId;
        sk: skill sk.personId == person.id && sk.skillName =="education" ;	
	// ((pos.education == 'student')||(sk.score != 'student' && pos.education == 'bachelor') || (sk.score != 'student'  && sk.score != 'bachelor' && 
	// pos.education == 'master')|| (sk.score != 'student'  && sk.score != 'bachelor' && sk.score != 'master' && pos.education == 'phd'));
	}
	then {
		console.log('position : '+pos.education,'  , person : ',pos.title,' : ',sk.score);
		var educationR =0;
		if(sk.score == 'student')educationR = 0.5;
		if(sk.score == 'bachelor')educationR = 1;
		if(sk.score == 'master')educationR = 1.5;
		if(sk.score == 'phd')educationR = 2;

		modify(personPosition, function(){
			this.rank += educationR;
			this.isEducationRank = true;
		});
	}
}

rule "getpositionPersons" {
	when {
		p:getpositionPersons ; 
		pos: position pos.title == p.title;
		perPos : personPos perPos.posId == pos.id;
		person : Person  person.id == perPos.personId;
		educationSkill : skill educationSkill.personId == person.id && educationSkill.skillName == 'education';
		experienceSkill : skill experienceSkill.personId == person.id && experienceSkill.skillName == 'experience';
		r: Result;

	}
	then {
		if (r.fired[pos.title] === undefined)
			r.fired[pos.title]=[];
		r.fired[pos.title].push({person : person,education:educationSkill.score ,experience:experienceSkill.score, rank: perPos.rank});
	}
}

rule "getAllpositionPersons" {
	when {
		p:getpositionPersons  p.title == "all"; 
		pos: position;
		perPos : personPos perPos.posId == pos.id;
		person : Person  person.id == perPos.personId;
		r: Result;
	}
	then {
	r.fired.x = 3;
		if (r.fired[pos.title] === undefined)
			r.fired[pos.title]=[];
		r.fired[pos.title].push({person : person, rank: perPos.rank});
	}
}

rule "WEb"{
	when {
		pos: position pos.title == "WEb";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
		s1: skill s1.personId == c.id && s1.skillName == pos.skills[1].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score)+ (s1.score *pos.skills[1].score))/6;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "Test"{
	when {
		pos: position pos.title == "Test";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score))/2;
		assert(new personPos(c.id,pos.id,rank));
	}
}

rule "Test Education"{
	when {
		pos: position pos.title == "Test Education";
		c: Person;
		s0: skill s0.personId == c.id && s0.skillName == pos.skills[0].name;
	}
	then {
		var rank = (0+ (s0.score *pos.skills[0].score))/2;
		assert(new personPos(c.id,pos.id,rank));
	}
}
